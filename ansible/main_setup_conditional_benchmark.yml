---
# Conditional OCPV Benchmark Setup
# This playbook installs benchmark tools based on the benchmark_tool variable
# Valid values: "hammerdb", "swingbench", "all"
# Default: "all" (installs both tools)
#
# Usage:
#   ansible-playbook -i inventory.yaml main_setup_conditional_benchmark.yml
#   ansible-playbook -i inventory.yaml main_setup_conditional_benchmark.yml -e benchmark_tool=hammerdb
#   ansible-playbook -i inventory.yaml main_setup_conditional_benchmark.yml -e benchmark_tool=swingbench

# Always install Oracle client and TNS configuration
- import_playbook: playbooks/oracle-client/install_oracle_client.yml
- import_playbook: playbooks/configure-tnsnames/configure_tnsnames.yml

# Conditional benchmark tool installation
- name: Install Benchmark Tools Based on Selection
  hosts: oracle_benchmark_client_vms
  become: yes
  tasks:
    - name: Load common variables
      include_vars: vars/common.yml
    
    - name: Load HammerDB variables
      include_vars: vars/hammerdb.yml
      when: benchmark_tool | default('all') in ['hammerdb', 'all']
    
    - name: Load SwingBench variables
      include_vars: vars/swingbench.yml
      when: benchmark_tool | default('all') in ['swingbench', 'all']
    
    - name: Display installation plan
      debug:
        msg: |
          ðŸš€ Installation Plan:
          - Benchmark tool selection: {{ benchmark_tool | default('all') }}
          {% if benchmark_tool | default('all') in ['hammerdb', 'all'] %}
          - âœ… HammerDB {{ hammerdb_version }} will be installed
          {% endif %}
          {% if benchmark_tool | default('all') in ['swingbench', 'all'] %}
          - âœ… SwingBench {{ swingbench_version }} will be installed
          {% endif %}
          - Base path: {{ benchmark_base_path }}
          - Scripts path: {{ scripts_base_path }}

# Conditional HammerDB installation
- name: Install and Setup HammerDB for Oracle Benchmark
  hosts: oracle_benchmark_client_vms
  become: yes
  vars:
    hammerdb_path: "{{ hammerdb_install_path }}"
  tasks:
    - name: Load common variables
      include_vars: vars/common.yml
      when: benchmark_tool | default('all') in ['hammerdb', 'all']
      
    - name: Load HammerDB-specific variables
      include_vars: vars/hammerdb.yml
      when: benchmark_tool | default('all') in ['hammerdb', 'all']
      
    - name: Install tcl using raw command
      raw: dnf install -y tcl
      when: 
        - benchmark_tool | default('all') in ['hammerdb', 'all']
        - ansible_os_family == "RedHat"
      args:
        warn: false

    - name: Check if HammerDB is already extracted
      stat:
        path: "{{ hammerdb_path }}"
      register: hammerdb_dir_stat
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Download HammerDB if not already downloaded
      get_url:
        url: "https://github.com/TPC-Council/HammerDB/releases/download/v{{ hammerdb_version }}/HammerDB-{{ hammerdb_version }}-RHEL8.tar.gz"
        dest: "/tmp/HammerDB-{{ hammerdb_version }}.tar.gz"
      when: 
        - benchmark_tool | default('all') in ['hammerdb', 'all']
        - hammerdb_dir_stat.stat.exists == false

    - name: Create OCPV benchmark base directory
      file:
        path: "{{ benchmark_base_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Create HammerDB base directory
      file:
        path: "{{ hammerdb_base_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Ensure HammerDB target path exists
      file:
        path: "{{ hammerdb_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Extract HammerDB if not already extracted
      unarchive:
        src: "/tmp/HammerDB-{{ hammerdb_version }}.tar.gz"
        dest: "{{ hammerdb_path }}"
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: 
        - benchmark_tool | default('all') in ['hammerdb', 'all']
        - hammerdb_dir_stat.stat.exists == false

    - name: Create scripts base directory
      file:
        path: "{{ scripts_base_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Create HammerDB scripts directory
      file:
        path: "{{ scripts_base_path }}/hammerdb"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Copy HammerDB scripts to organized location
      copy:
        src: scripts/hammerdb/
        dest: "{{ scripts_base_path }}/hammerdb/"
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Create HammerDB results directory within scripts
      file:
        path: "{{ scripts_base_path }}/hammerdb/results"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

    - name: Create environment file template for HammerDB
      template:
        src: templates/hammerdb.env.j2
        dest: "{{ scripts_base_path }}/hammerdb/.env"
        mode: '0644'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['hammerdb', 'all']

# Conditional SwingBench installation
- name: Install and Setup SwingBench for Oracle Benchmark
  hosts: oracle_benchmark_client_vms
  become: yes
  vars:
    swingbench_path: "{{ swingbench_base_path }}/{{ swingbench_version }}"
  tasks:
    - name: Load common variables
      include_vars: vars/common.yml
      when: benchmark_tool | default('all') in ['swingbench', 'all']
      
    - name: Load SwingBench-specific variables
      include_vars: vars/swingbench.yml
      when: benchmark_tool | default('all') in ['swingbench', 'all']
      
    - name: Check Java version
      command: java -version
      register: java_version_check
      failed_when: false
      changed_when: false
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Install OpenJDK 11 if Java not available or wrong version
      dnf:
        name: java-11-openjdk
        state: present
      when: 
        - benchmark_tool | default('all') in ['swingbench', 'all']
        - java_version_check.rc != 0 or '11.' not in java_version_check.stderr

    - name: Verify Java installation after installing
      command: java -version
      register: java_version_verify
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Fail if Java version is still incorrect
      fail:
        msg: "Java 11 is required but not installed correctly. Current version: {{ java_version_verify.stderr }}"
      when: 
        - benchmark_tool | default('all') in ['swingbench', 'all']
        - java_version_verify.rc != 0 or '11.' not in java_version_verify.stderr

    - name: Install unzip utility
      dnf:
        name: unzip
        state: present
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Check if SwingBench is already installed
      stat:
        path: "{{ swingbench_path }}"
      register: swingbench_dir_stat
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Create OCPV benchmark base directory
      file:
        path: "{{ benchmark_base_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Create SwingBench base directory
      file:
        path: "{{ swingbench_base_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Download SwingBench if not already downloaded
      get_url:
        url: "https://github.com/dominicdg/swingbench-public/releases/download/production/swingbench{{ swingbench_version }}.zip"
        dest: "/tmp/swingbench{{ swingbench_version }}.zip"
      when: 
        - benchmark_tool | default('all') in ['swingbench', 'all']
        - swingbench_dir_stat.stat.exists == false

    - name: Create SwingBench versioned directory
      file:
        path: "{{ swingbench_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Extract SwingBench to temporary location
      unarchive:
        src: "/tmp/swingbench{{ swingbench_version }}.zip"
        dest: "/tmp"
        remote_src: yes
      when: 
        - benchmark_tool | default('all') in ['swingbench', 'all']
        - swingbench_dir_stat.stat.exists == false

    - name: Move SwingBench contents to versioned directory
      shell: "mv /tmp/swingbench/* {{ swingbench_path }}/"
      when: 
        - benchmark_tool | default('all') in ['swingbench', 'all']
        - swingbench_dir_stat.stat.exists == false

    - name: Make SwingBench binaries executable
      file:
        path: "{{ swingbench_path }}/bin"
        mode: '0755'
        recurse: yes
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Create scripts base directory
      file:
        path: "{{ scripts_base_path }}"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Create SwingBench scripts directory
      file:
        path: "{{ scripts_base_path }}/swingbench"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Copy SwingBench scripts to organized location
      copy:
        src: scripts/swingbench/
        dest: "{{ scripts_base_path }}/swingbench/"
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Create SwingBench results directory within scripts
      file:
        path: "{{ scripts_base_path }}/swingbench/results"
        state: directory
        mode: '0755'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Create environment file template
      template:
        src: templates/swingbench.env.j2
        dest: "{{ scripts_base_path }}/swingbench/.env"
        mode: '0644'
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Set executable permissions on SwingBench scripts
      file:
        path: "{{ scripts_base_path }}/swingbench"
        mode: '0755'
        recurse: yes
        owner: "{{ system_user }}"
        group: "{{ system_group }}"
      when: benchmark_tool | default('all') in ['swingbench', 'all']

    - name: Display installation summary
      debug:
        msg: |
          âœ… SwingBench Installation Summary:
          - Version: {{ swingbench_version }}
          - Installation Path: {{ swingbench_path }}
          - Scripts Path: {{ scripts_base_path }}/swingbench
          - Java Version: {{ java_version_verify.stderr.split('\n')[0] }}
          
          Next Steps:
          1. Configure environment: {{ scripts_base_path }}/swingbench/.env
          2. Build SOE schema: {{ scripts_base_path }}/swingbench/build-soe-schema.sh
          3. Run benchmark: {{ scripts_base_path }}/swingbench/run-soe-benchmark.sh
      when: benchmark_tool | default('all') in ['swingbench', 'all'] 