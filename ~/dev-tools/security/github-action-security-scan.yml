name: Security Scan
description: 'Scan repository for sensitive information like IP addresses, passwords, and secrets'
inputs:
  fail-on-detection:
    description: 'Whether to fail the action if sensitive information is detected'
    required: false
    default: 'false'
  exclude-files:
    description: 'Comma-separated list of files to exclude from scanning'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Security Scan
      shell: bash
      run: |
        #!/bin/bash
        
        # Security scan script for GitHub Actions
        RED='\033[0;31m'
        YELLOW='\033[1;33m'
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        echo -e "${BLUE}üîç Security Scan - Checking for sensitive information...${NC}"
        
        # Define sensitive patterns
        PATTERNS=(
            "IP_ADDRESS:(?:[0-9]{1,3}\.){3}[0-9]{1,3}"
            "PRIVATE_IP:(10\.([0-9]{1,3}\.){2}[0-9]{1,3})|(172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3}\.[0-9]{1,3})|(192\.168\.[0-9]{1,3}\.[0-9]{1,3})"
            "DNS_HOSTNAME:[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)+"
            "PASSWORD_FIELD:password\s*[:=]\s*['\"]?[^'\"\s<>]{3,}['\"]?"
            "SECRET_KEY:(secret|key|token|auth)\s*[:=]\s*['\"]?[A-Za-z0-9+/]{10,}['\"]?"
            "PRIVATE_KEY_FILE:\.(pem|key|p12|pfx)|id_rsa|id_dsa|id_ecdsa|id_ed25519"
            "AWS_ACCESS_KEY:AKIA[0-9A-Z]{16}"
            "AWS_SECRET_KEY:[0-9a-zA-Z/+]{40}"
            "DATABASE_URL:(mysql|postgresql|mongodb|redis)://[^'\"\s<>]+"
            "EMAIL_ADDRESS:[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
            "JWT_TOKEN:eyJ[A-Za-z0-9_/+=-]+"
        )
        
        # Allow list for known safe patterns
        SAFE_PATTERNS="127\.0\.0\.1|localhost|0\.0\.0\.0|255\.255\.255\.255|example\.com"
        PLACEHOLDER_PATTERNS="<[^>]*>|\{\{[^}]*\}\}|\$\{[^}]*\}|YOUR_[A-Z_]+|REPLACE_[A-Z_]+"
        SAFE_WORDS="password|secret|token|key|auth"
        
        VIOLATIONS_FOUND=0
        
        # Function to check if a match is in allowlist
        is_allowed() {
            local match="$1"
            local category="$2"
            
            if echo "$match" | grep -qE "$PLACEHOLDER_PATTERNS"; then
                return 0
            fi
            
            if echo "$match" | grep -qE "$SAFE_PATTERNS"; then
                return 0
            fi
            
            if [[ "$category" == "PASSWORD_FIELD" || "$category" == "SECRET_KEY" ]]; then
                if echo "$match" | grep -qiE "$SAFE_WORDS"; then
                    return 0
                fi
            fi
            
            return 1
        }
        
        # Get files to scan
        FILES=$(git ls-files | grep -E '\.(yml|yaml|md|txt|sh|py|js|json|xml|properties|conf|cfg|ini|tf|tfvars)$')
        
        # Exclude specified files
        if [ -n "${{ inputs.exclude-files }}" ]; then
            IFS=',' read -ra EXCLUDE_ARRAY <<< "${{ inputs.exclude-files }}"
            for exclude in "${EXCLUDE_ARRAY[@]}"; do
                FILES=$(echo "$FILES" | grep -v "$exclude")
            done
        fi
        
        # Scan files
        for file in $FILES; do
            if [ -f "$file" ]; then
                file_violations=0
                
                for pattern_entry in "${PATTERNS[@]}"; do
                    pattern_name="${pattern_entry%%:*}"
                    pattern="${pattern_entry#*:}"
                    
                    matches=$(grep -nE "$pattern" "$file" 2>/dev/null || true)
                    
                    if [ -n "$matches" ]; then
                        while IFS= read -r line; do
                            line_num=$(echo "$line" | cut -d: -f1)
                            content=$(echo "$line" | cut -d: -f2-)
                            match=$(echo "$content" | grep -oE "$pattern" | head -1)
                            
                            if ! is_allowed "$match" "$pattern_name"; then
                                if [ $file_violations -eq 0 ]; then
                                    echo -e "${RED}‚ùå Potential sensitive data in: $file${NC}"
                                fi
                                echo -e "   ${YELLOW}$pattern_name${NC} at line $line_num: ${RED}$match${NC}"
                                file_violations=$((file_violations + 1))
                            fi
                        done <<< "$matches"
                    fi
                done
                
                if [ $file_violations -gt 0 ]; then
                    VIOLATIONS_FOUND=$((VIOLATIONS_FOUND + 1))
                    echo ""
                fi
            fi
        done
        
        # Summary
        if [ $VIOLATIONS_FOUND -gt 0 ]; then
            echo -e "${RED}üö® SECURITY ALERT: Found potential sensitive information in $VIOLATIONS_FOUND file(s)${NC}"
            echo ""
            echo "::warning::Found potential sensitive information in $VIOLATIONS_FOUND file(s)"
            
            if [ "${{ inputs.fail-on-detection }}" = "true" ]; then
                echo "::error::Security scan failed - sensitive information detected"
                exit 1
            fi
        else
            echo -e "${GREEN}‚úÖ No sensitive information detected${NC}"
        fi 